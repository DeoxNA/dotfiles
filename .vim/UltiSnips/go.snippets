# Sources:
#   https://github.com/honza/vim-snippets/blob/master/UltiSnips/go.snippets

##############
# Constructs #
##############
snippet struct "struct declaration" b
type ${1:Struct} struct {
	${0:${VISUAL}}
}
endsnippet

snippet interface "interface declaration" b
type ${1:Interface} interface {
	${0:${VISUAL}}
}
endsnippet

snippet main "main function" b
func main() {
	${0:${VISUAL}}
}
endsnippet

snippet meth "method" b
func (${1:receiver} ${2:type}) ${3:name}(${4:params})${5/(.+)/ /}${5:type} {
	${0:${VISUAL}}
}
endsnippet

snippet func "function" b
func ${1:name}(${2:params})${3/(.+)/ /}${3:type} {
	${0:${VISUAL}}
}
endsnippet


################
# Control flow #
################
snippet if "if statement" b
if ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet ife "if..else" b
if ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
} else {
	$0
}
endsnippet

snippet switch "switch statement" b
switch ${1:expression}${1/(.+)/ /}{
case$0
	${VISUAL}
}
endsnippet

snippet select "select statement" b
select ${1:expression}${1/(.+)/ /}{
case$0
	${VISUAL}
}
endsnippet

snippet for "for loop" b
for ${1:i} := ${2:0}; $1 ${3:<} ${4:size}; ${5:$1++} {
	${0:${VISUAL}}
}
endsnippet

snippet fore "for each loop" b
for ${1:_}, ${2:val} := range ${3:list} {
	${0:${VISUAL}}
}
endsnippet

##############
#  Variables #
##############
snippet map "map type" b
map[${1:keytype}]${2:valtype}
endsnippet

snippet : "variable declaration :=" b
${1:name} := ${0:value}
endsnippet

snippet var "variable declaration" b
var ${1:name}${2/(.+)/ /}${2:type}${3: = ${0:value}}
endsnippet


############
#   Misc   #
############
snippet /^import/ "import declaration" r
import (
	"${1:package}"
)
endsnippet

snippet /^package/ "package declaration" r
// Package $1 provides ...
package ${1:main}
endsnippet

snippet err "basic error handling" b
if err != nil {
	${1:log.Fatal(err)}
}
endsnippet
